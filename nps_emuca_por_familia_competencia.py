# -*- coding: utf-8 -*-
"""NPS_emuca_por_familia_competencia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pKeVzXAv-S4e_UFML3XgHRDfoJBtbzjx

# VALORACIONES DE GOOGLE SHOPPING PARA CÁLCULO DE NPS POR FAMÍLIA DE LA COMPETENCIA

## Librerías
"""

!pip install beautifulsoup4
!pip install google-search-results-serpwow
!pip install google-search-results-serpwow --upgrade

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import stats
import pandas as pd 
import multiprocessing
import random

from matplotlib import rc
from sklearn.preprocessing import scale
from sklearn.preprocessing import OneHotEncoder
import timeit
import itertools
import seaborn as sns
from collections import Counter
import operator

import requests
import json
import pandas
import csv
from bs4 import BeautifulSoup
from serpwow.google_search_results import GoogleSearchResults

"""## API Cajones"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'cajones ebay',
           'cajones ferreteria.es',
           'cajones amazon',
           'cajones ferreterias industriales',
           'cajones manommano.es',
           'cajones tuandco.com',
           'cajones masferreteria',
           'cajones valomix',

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_emuca_competencia_1.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_emuca_competencia_1.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_emuca_competencia_1.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_1 = df[df['stars'].notna()]

df_reviews_competencia_1 = df_reviews_competencia_1.reset_index(drop=True)

df_reviews_competencia_1.sort_values(by='stars',ascending=True).head(10)

df_reviews_competencia_1["nps"] = 2 * df_reviews_competencia_1["stars"]
df_reviews_competencia_1

df_reviews_competencia_1[(df_reviews_competencia_1['nps']<7) | (df_reviews_competencia_1['nps']>=9)]

nps_value_cajones=df_reviews_competencia_1['reviews'][df_reviews_competencia_1['nps']>=9].sum() - df_reviews_competencia_1['reviews'][df_reviews_competencia_1['nps']<7].sum()
print(nps_value_cajones)

nps_percentage_cajones=nps_value_cajones/df_reviews_competencia_1['reviews'].sum()
nps_percentage_cajones="{0:.2%}".format(nps_percentage_cajones)
print (nps_percentage_cajones)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_cajones = {'Family_type': ['Cajones'],
        '%NPS': nps_percentage_cajones
        }

NPS_df = pd.DataFrame(NPS_cajones, columns = ['Family_type', '%NPS'])

print (NPS_df)

"""## API Bisagras"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("C197A5658DC243E69A6E242F673BD778") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'hinges ebay',
           'hinges ferreteria.es',
           'hinges amazon',
           'hinges ferreterias industriales',
           'hinges manommano.es',
           'hinges tuandco.com',
           'hinges masferreteria',
           'hinges valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_2.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_2.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_emuca_competencia_2.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_2 = df[df['stars'].notna()]

df_reviews_competencia_2 = df_reviews_competencia_2.reset_index(drop=True)

df_reviews_competencia_2.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_2["nps"] = 2 * df_reviews_competencia_2["stars"]
df_reviews_competencia_2

df_reviews_competencia_2[(df_reviews_competencia_2['nps']<7) | (df_reviews_competencia_2['nps']>=9)]

nps_value_bisagras=df_reviews_competencia_2['reviews'][df_reviews_competencia_2['nps']>=9].sum() - df_reviews_competencia_2['reviews'][df_reviews_competencia_2['nps']<7].sum()
print(nps_value_bisagras)

nps_percentage_bisagras=nps_value_bisagras/df_reviews_competencia_2['reviews'].sum()
nps_percentage_bisagras="{0:.2%}".format(nps_percentage_bisagras)
print (nps_percentage_bisagras)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_bisagras = {'Family_type': 'Bisagras',
        '%NPS': nps_percentage_bisagras
        }

NPS_df = NPS_df.append(NPS_bisagras, ignore_index=True)

print (NPS_df)

"""## API Equipamiento"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'equipamiento ebay',
           'equipamiento ferreteria.es',
           'equipamiento amazon',
           'equipamiento ferreterias industriales',
           'equipamiento manommano.es',
           'equipamiento tuandco.com',
           'equipamiento masferreteria',
           'equipamiento valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_emuca_competencia_3.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_emuca_competencia_3.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_emuca_competencia_3.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_3 = df[df['stars'].notna()]

df_reviews_competencia_3 = df_reviews_competencia_3.reset_index(drop=True)

df_reviews_competencia_3.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_3["nps"] = 2 * df_reviews_competencia_3["stars"]
df_reviews_competencia_3

nps_value_equipamiento=df_reviews_competencia_3['reviews'][df_reviews_competencia_3['nps']>=9].sum() - df_reviews_competencia_3['reviews'][df_reviews_competencia_3['nps']<7].sum()
print(nps_value_equipamiento)

nps_percentage_equipamiento=nps_value_equipamiento/df_reviews_competencia_3['reviews'].sum()
nps_percentage_equipamiento="{0:.2%}".format(nps_percentage_equipamiento)
print (nps_percentage_equipamiento)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_equipamiento = {'Family_type': 'Equipamiento',
        '%NPS': nps_percentage_equipamiento
        }

NPS_df = NPS_df.append(NPS_equipamiento, ignore_index=True)

print (NPS_df)

"""## API Montaje"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'montaje ebay',
           'montaje ferreteria.es',
           'montaje amazon',
           'montaje ferreterias industriales',
           'montaje manommano.es',
           'montaje tuandco.com',
           'montaje masferreteria',
           'montaje valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_emuca_competencia_4.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_emuca_competencia_4.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_emuca_competencia_4.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_4 = df[df['stars'].notna()]

df_reviews_competencia_4 = df_reviews_competencia_4.reset_index(drop=True)

df_reviews_competencia_4.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_4["nps"] = 2 * df_reviews_competencia_4["stars"]
df_reviews_competencia_4

nps_value_montaje=df_reviews_competencia_4['reviews'][df_reviews_competencia_4['nps']>=9].sum() - df_reviews_competencia_4['reviews'][df_reviews_competencia_4['nps']<7].sum()
print(nps_value_montaje)

nps_percentage_montaje=nps_value_montaje/df_reviews_competencia_4['reviews'].sum()
nps_percentage_montaje="{0:.2%}".format(nps_percentage_montaje)
print (nps_percentage_montaje)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_montaje = {'Family_type': 'Montaje',
        '%NPS': nps_percentage_montaje
        }

NPS_df = NPS_df.append(NPS_montaje, ignore_index=True)

print (NPS_df)

"""## API Correderos"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'correderos ebay',
           'correderos ferreteria.es',
           'correderos amazon',
           'correderos ferreterias industriales',
           'correderos manommano.es',
           'correderos tuandco.com',
           'correderos masferreteria',
           'correderos valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_5.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_5.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_competencia_5.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_5 = df[df['stars'].notna()]

df_reviews_competencia_5 = df_reviews_competencia_5.reset_index(drop=True)

df_reviews_competencia_5.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_5["nps"] = 2 * df_reviews_competencia_5["stars"]
df_reviews_competencia_5

df_reviews_competencia_5[(df_reviews_competencia_5['nps']<7) | (df_reviews_competencia_5['nps']>=9)]

nps_value_correderos=df_reviews_competencia_5['reviews'][df_reviews_competencia_5['nps']>=9].sum() - df_reviews_competencia_5['reviews'][df_reviews_competencia_5['nps']<7].sum()
print(nps_value_correderos)

nps_percentage_correderos=nps_value_correderos/df_reviews_competencia_5['reviews'].sum()
nps_percentage_correderos="{0:.2%}".format(nps_percentage_correderos)
print (nps_percentage_correderos)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_correderos = {'Family_type': 'Correderos',
        '%NPS': nps_percentage_correderos
        }

NPS_df = NPS_df.append(NPS_correderos, ignore_index=True)

print (NPS_df)

"""## API Armarios"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'armarios ebay',
           'armarios ferreteria.es',
           'armarios amazon',
           'armarios ferreterias industriales',
           'armarios manommano.es',
           'armarios tuandco.com',
           'armarios masferreteria',
           'armarios valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_6.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_6.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_competencia_6.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_6 = df[df['stars'].notna()]

df_reviews_competencia_6 = df_reviews_competencia_6.reset_index(drop=True)

df_reviews_competencia_6.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_6["nps"] = 2 * df_reviews_competencia_6["stars"]
df_reviews_competencia_6

df_reviews_competencia_6[(df_reviews_competencia_6['nps']<7) | (df_reviews_competencia_6['nps']>=9)]

nps_value_armarios=df_reviews_competencia_6['reviews'][df_reviews_competencia_6['nps']>=9].sum() - df_reviews_competencia_6['reviews'][df_reviews_competencia_6['nps']<7].sum()
print(nps_value_armarios)

nps_percentage_armarios=nps_value_armarios/df_reviews_competencia_6['reviews'].sum()
nps_percentage_armarios="{0:.2%}".format(nps_percentage_armarios)
print (nps_percentage_armarios)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_armarios = {'Family_type': 'Armarios',
        '%NPS': nps_percentage_armarios
        }

NPS_df = NPS_df.append(NPS_armarios, ignore_index=True)

print (NPS_df)

"""## API Iluminación"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("9E083A81FB0B470EB5C83270280C9998") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'lighting  ebay',
           'lighting  ferreteria.es',
           'lighting  amazon',
           'lighting  ferreterias industriales',
           'lighting  manommano.es',
           'lighting  tuandco.com',
           'lighting  masferreteria',
           'lighting  valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_7.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_7.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_competencia_7.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_7 = df[df['stars'].notna()]

df_reviews_competencia_7 = df_reviews_competencia_7.reset_index(drop=True)

df_reviews_competencia_7.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_7["nps"] = 2 * df_reviews_competencia_7["stars"]
df_reviews_competencia_7

df_reviews_competencia_7[(df_reviews_competencia_7['nps']<7) | (df_reviews_competencia_7['nps']>=9)]

nps_value_iluminacion=df_reviews_competencia_7['reviews'][df_reviews_competencia_7['nps']>=9].sum() - df_reviews_competencia_7['reviews'][df_reviews_competencia_7['nps']<7].sum()
print(nps_value_iluminacion)

nps_percentage_iluminacion=nps_value_iluminacion/df_reviews_competencia_7['reviews'].sum()
nps_percentage_iluminacion="{0:.2%}".format(nps_percentage_iluminacion)
print (nps_percentage_iluminacion)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_iluminacion = {'Family_type': 'Iluminación',
        '%NPS': nps_percentage_iluminacion
        }

NPS_df = NPS_df.append(NPS_iluminacion, ignore_index=True)

print (NPS_df)

"""## API Bases"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("C197A5658DC243E69A6E242F673BD778") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'bases ebay',
           'bases ferreteria.es',
           'bases amazon',
           'bases ferreterias industriales',
           'bases manommano.es',
           'bases tuandco.com',
           'bases masferreteria',
           'bases valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_8.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_8.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_competencia_8.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_8 = df[df['stars'].notna()]

df_reviews_competencia_8 = df_reviews_competencia_8.reset_index(drop=True)

df_reviews_competencia_8.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_8["nps"] = 2 * df_reviews_competencia_8["stars"]
df_reviews_competencia_8

df_reviews_competencia_8[(df_reviews_competencia_8['nps']<7) | (df_reviews_competencia_8['nps']>=9)]

nps_value_bases=df_reviews_competencia_8['reviews'][df_reviews_competencia_8['nps']>=9].sum() - df_reviews_competencia_8['reviews'][df_reviews_competencia_8['nps']<7].sum()
print(nps_value_bases)

nps_percentage_bases=nps_value_bases/df_reviews_competencia_8['reviews'].sum()
nps_percentage_bases="{0:.2%}".format(nps_percentage_bases)
print (nps_percentage_bases)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_bases = {'Family_type': 'Bases',
        '%NPS': nps_percentage_bases
        }

NPS_df = NPS_df.append(NPS_bases, ignore_index=True)

print (NPS_df)

"""## API Tiradores"""

# This API KEY cames from this site https://app.serpwow.com/playground
serpwow = GoogleSearchResults("C197A5658DC243E69A6E242F673BD778") #This APIKEY is not valid anymore as I already used the 100 free requests.

queries = [
           'handles ebay',
           'handles ferreteria.es',
           'handles amazon',
           'handles ferreterias industriales',
           'handles manommano.es',
           'handles tuandco.com',
           'handles masferreteria',
           'handles valomix'

]

results = []

for query in queries:
  params = {
    "q" : query,
    "search_type" : "shopping",
    "time_period" : "custom",
    "time_period_min" : "01/01/2018",
    "time_period_max" : "10/07/2020",
    "sort_by" : "highest_rating"
  }

  result = serpwow.get_json(params)

  if 'shopping_results' in result:
    results += result['shopping_results']

with open('nps_competencia_9.csv', 'w', encoding='utf-8') as file:
    fields = ['title', 'stars', 'reviews', 'price', 'provider']
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for result in results:
        writer.writerow({
            'title' : result['title'] if 'title' in result else None,
            'stars': result['rating'] if 'rating' in result else None,
            'reviews': result['reviews'] if 'reviews' in result else None, 
            'price': result['price_raw'] if 'price_raw' in result else None, 
            'provider': result['merchant'] if 'merchant' in result else None
            })

from google.colab import drive
drive.mount('/content/drive')

df = pandas.read_csv("/content/nps_competencia_9.csv")
df

df.nunique()

df.to_csv('/content/drive/My Drive/TFM/03_DATASETS/nps_competencia_9.csv',sep=';',decimal=',')

df.stars.count()

df.isna().sum()

df_reviews_competencia_9 = df[df['stars'].notna()]

df_reviews_competencia_9 = df_reviews_competencia_9.reset_index(drop=True)

df_reviews_competencia_9.sort_values(by='stars',ascending=True).head(10)

pd.options.display.max_colwidth=500

df_reviews_competencia_9["nps"] = 2 * df_reviews_competencia_9["stars"]
df_reviews_competencia_9

df_reviews_competencia_9[(df_reviews_competencia_9['nps']<7) | (df_reviews_competencia_9['nps']>=9)]

nps_value_tiradores=df_reviews_competencia_9['reviews'][df_reviews_competencia_9['nps']>=9].sum() - df_reviews_competencia_9['reviews'][df_reviews_competencia_9['nps']<7].sum()
print(nps_value_tiradores)

nps_percentage_tiradores=nps_value_tiradores/df_reviews_competencia_9['reviews'].sum()
nps_percentage_tiradores="{0:.2%}".format(nps_percentage_tiradores)
print (nps_percentage_tiradores)

"""Creamos un dataframe donde guardamos el porcentaje de NPS de  cada família"""

NPS_tiradores = {'Family_type': 'Tiradores',
        '%NPS': nps_percentage_tiradores
        }

NPS_df = NPS_df.append(NPS_tiradores, ignore_index=True)

print (NPS_df)

"""## Gráfica"""

NPS_df_plot=NPS_df

NPS_df_plot['NPS'] = NPS_df_plot['%NPS'].str[:-1].astype(float)

NPS_df_plot

NPS_df_plot = NPS_df_plot.sort_values('NPS')

# Name variables
height = NPS_df_plot['NPS']
bars = NPS_df_plot['Family_type']
y_pos = np.arange(len(bars))
 
# Create horizontal bars
plt.barh(y_pos,height)

# Create names on the y-axis

plt.yticks(y_pos, bars)
plt.xlabel('% NPS')
plt.ylabel('Tipo de família')
for index, value in enumerate(height):
    plt.text(value, index, str(value)) 
 
# Show graphic
plt.show()