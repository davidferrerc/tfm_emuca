# -*- coding: utf-8 -*-
"""CLIENTES-2019.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MXKVQuMgB-oq88BimnoCiAjr1oYC9FB
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import stats
import pandas as pd 
import multiprocessing
import random

from matplotlib import rc
from sklearn.preprocessing import scale
from sklearn.preprocessing import OneHotEncoder
import timeit
import itertools
import seaborn as sns
from collections import Counter
import operator

from google.colab import drive
drive.mount('/content/drive')

"""##IMPORTAMOS EVENTOS"""

txt_event = '/content/drive/My Drive/TFM/03_DATASETS/eventos_2.rpt'
widths=[10,39,12,16,12,39,20,10,41,16,50,39,17,18,39,41,41,41,41,41,30,39] 

dfevent = pd.read_fwf(txt_event, widths=widths, header=1, index_col=None, index=True)
rowcl,colcl = dfevent.shape
dfevent=dfevent[0:(rowcl-3)]

new_header = ['TipoEvento','CodigoEvento','FechaEvento','UsuarioEvento','HoraEvento','ClienteEvento','CodigoPostalEvento','PaísEvento','RepresentanteEvento','TipoPortesEvento','FormaPagoEvento','PlazoPagoEvento','SkuArticuloEvento','TipoArticuloEvento','FamiliaArticuloEvento','SubfamiliaArticuloEvento','CantidadArticuloEvento','AlmacenArticuloEvento','TarifaArticuloEvento','DescuentoArticuloEvento','MotivoEvento','CosteEvento']
dfevent.columns = new_header
dfevent

!pip install pandas_profiling==2.6.0
#check if the pivot table has any duplicated CodigoCliente
import pandas as pd
from pandas_profiling import ProfileReport

report = ProfileReport(dfevent, minimal=True, title='Pandas Profiling Report', html={'style':{'full_width':True}})
report

#eliminamos los eventos que sean una oferta
indexNames = dfevent[ dfevent['TipoEvento'] == 'OFERTA' ].index
# Delete these row indexes from dataFrame
dfevent.drop(indexNames , inplace=True)

dfevent = dfevent[(dfevent['FechaEvento'] >= '2019-01-01') &
          (dfevent['FechaEvento'] <= '2019-12-31')]

report = ProfileReport(dfevent, minimal=True, title='Pandas Profiling Report', html={'style':{'full_width':True}})
report

events=dfevent.sort_values(by=['FechaEvento'])
events['ClienteEvento'] = events.ClienteEvento.map(lambda x: str(x)[:-2])

"""## IMPORTAMOS CLIENTES"""

# Load the dataset CLIENTES
txt_client = '/content/drive/My Drive/TFM/03_DATASETS/clientes.rpt'

widths = [40, 31, 16, 21, 12, 51, 17, 40, 40, 15, 50]

dfclient = pd.read_fwf(txt_client, widths=widths, header=1, index_col=None, index=True)
rowcl,colcl = dfclient.shape
dfclient=dfclient[0:(rowcl-3)]

new_header = ['CodigoCliente','NombreCliente','NIFCliente','CodigoPostalCliente','PaisCliente','SegmentoCliente','FechaAltaCliente','RepresentanteCliente','AreaCliente','MercadoCliente','GrupoDescuentoCliente']

dfclient.columns = new_header
clientes = dfclient

report = ProfileReport(dfclient, minimal=True, title='Pandas Profiling Report', html={'style':{'full_width':True}})
report

MASTER = events.merge(clientes ,left_on='ClienteEvento', right_on='CodigoCliente')

MASTER

MASTER['Revenue'] = MASTER["CantidadArticuloEvento"] * MASTER["TarifaArticuloEvento"] * (100 - MASTER["DescuentoArticuloEvento"])/100

MASTER['CosteEvento'] = pd.to_numeric(MASTER['CosteEvento'],errors='coerce')

"""## FACTURACIÓN POR SEGMENTO"""

segmento = MASTER[['SegmentoCliente', 'Revenue', 'CosteEvento']]

segmento

ventas_segmento = segmento.groupby(['SegmentoCliente']).agg({'Revenue':'sum','CosteEvento':'sum'}).reset_index()

ventas_segmento.dtypes

ventas_segmento

ventas_segmento['Margin'] = (ventas_segmento["Revenue"] - ventas_segmento["CosteEvento"])
ventas_segmento['Margin_%'] = ventas_segmento['Margin']/ventas_segmento["Revenue"] * 100

ventas_segmento = ventas_segmento[(ventas_segmento['Revenue'] > 0)]
ventas_segmento = ventas_segmento[(ventas_segmento['CosteEvento'] > 0)]

ventas_segmento=ventas_segmento.sort_values(by=['Revenue'], ascending=False)

ventas_segmento.round(2)

Total = ventas_segmento['Revenue'].sum()

print (Total)

ventas_segmento['percent'] = (ventas_segmento['Revenue'] / 
                  ventas_segmento['Revenue'].sum()) * 100

ventas_segmento=ventas_segmento.sort_values(by=['Revenue'], ascending=False)
ventas_segmento.round(0)

ventas_segmento.dtypes

"""## FACTURACIÓN POR PAÍS"""

pais = MASTER[['PaisCliente', 'Revenue', 'CosteEvento']]

pais

ventas_pais = pais.groupby(['PaisCliente']).agg({'Revenue':'sum','CosteEvento':'sum'}).reset_index()

ventas_pais.dtypes

ventas_pais

ventas_pais['Margin'] = (ventas_pais["Revenue"] - ventas_pais["CosteEvento"])
ventas_pais['Margin_%'] = ventas_pais['Margin']/ventas_pais["Revenue"] * 100

ventas_pais = ventas_pais[(ventas_pais['Revenue'] > 0)]
ventas_pais = ventas_pais[(ventas_pais['CosteEvento'] > 0)]

ventas_pais=ventas_pais.sort_values(by=['Revenue'], ascending=False)

ventas_pais.round(2)

Total = ventas_pais['Revenue'].sum()

print (Total)

ventas_pais['percent'] = (ventas_pais['Revenue'] / 
                  ventas_pais['Revenue'].sum()) * 100

ventas_pais=ventas_pais.sort_values(by=['Revenue'], ascending=False)
ventas_pais.head(10).round(0)

ventas_pais.dtypes

"""## FACTURACIÓN POR CLIENTE"""

cliente = MASTER[['NombreCliente', 'Revenue', 'CosteEvento']]

cliente

ventas_cliente = cliente.groupby(['NombreCliente']).agg({'Revenue':'sum','CosteEvento':'sum'}).reset_index()

ventas_cliente.dtypes

ventas_cliente

ventas_cliente['Margin'] = (ventas_cliente["Revenue"] - ventas_cliente["CosteEvento"])
ventas_cliente['Margin_%'] = ventas_cliente['Margin']/ventas_cliente["Revenue"] * 100

ventas_cliente = ventas_cliente[(ventas_cliente['Revenue'] > 0)]
ventas_cliente = ventas_cliente[(ventas_cliente['CosteEvento'] > 0)]

ventas_cliente=ventas_cliente.sort_values(by=['Revenue'], ascending=False)

ventas_cliente.round(2)

Total = ventas_cliente['Revenue'].sum()

print (Total)

ventas_cliente=ventas_cliente.sort_values(by=['Revenue'], ascending=False)
ventas_cliente['percent'] = (ventas_cliente['Revenue'] / 
                  ventas_cliente['Revenue'].sum()) * 100

ventas_cliente.head(10).round(2)

ventas_cliente.Revenue.sum()

ventas_cliente.tail(10)

ventas_cliente.dtypes

ventas_cliente.to_csv('/content/drive/My Drive/TFM/03_DATASETS/ventas_por_cliente_2019.csv',sep=';',decimal=',')