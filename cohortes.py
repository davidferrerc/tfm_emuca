# -*- coding: utf-8 -*-
"""Cohortes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m14B2w6C391uwd0aFocqDNsHMvmzxhVP
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import stats
import pandas as pd 
import multiprocessing
import random

from matplotlib import rc
from sklearn.preprocessing import scale
from sklearn.preprocessing import OneHotEncoder
import timeit
import itertools
import seaborn as sns
from collections import Counter
import operator

from google.colab import drive
drive.mount('/content/drive')

"""# LOAD EVENTOS"""

txt_event = '/content/drive/My Drive/TFM/03_DATASETS/eventos_2.rpt'
widths=[10,39,12,16,12,39,20,10,41,16,50,39,17,18,39,41,41,41,41,41,30,39] 

dfevent = pd.read_fwf(txt_event, widths=widths, header=1, index_col=None, index=True)
rowcl,colcl = dfevent.shape
dfevent=dfevent[0:(rowcl-3)]

new_header = ['TipoEvento','CodigoEvento','FechaEvento','UsuarioEvento','HoraEvento','ClienteEvento','CodigoPostalEvento','PaísEvento','RepresentanteEvento','TipoPortesEvento','FormaPagoEvento','PlazoPagoEvento','SkuArticuloEvento','TipoArticuloEvento','FamiliaArticuloEvento','SubfamiliaArticuloEvento','CantidadArticuloEvento','AlmacenArticuloEvento','TarifaArticuloEvento','DescuentoArticuloEvento','MotivoEvento','CosteEvento']
dfevent.columns = new_header
dfevent

#vamos a utilizar solo los últimos 5 años
dfevent = dfevent[(dfevent['FechaEvento'] >= '2010-01-01') &
          (dfevent['FechaEvento'] <= '2019-12-31')]

pedido = dfevent.loc[dfevent['TipoEvento'] == 'PEDIDO']
pedido

pedido=pedido[['CodigoEvento','FechaEvento','ClienteEvento','CantidadArticuloEvento']]#Calulate total purchase
#remove the last number and the point of the string index
pedido['ClienteEvento'] = pedido.ClienteEvento.map(lambda x: str(x)[:-2])
pedido

pedido['FechaEvento'] =  pd.to_datetime(pedido['FechaEvento'], format='%Y-%m-%d')

"""# START COMPUTING COHORTES"""

#Create a period column based on the OrderDate
pedido['OrderPeriod'] = pedido.FechaEvento.apply(lambda x: x.strftime('%Y'))
pedido.head()

pedido.info()

#Determine the user's cohort group (based on their first order)-> Create a new column called CohortGroup, which is the year in which the user's first purchase occurred.
pedido.set_index('ClienteEvento', inplace=True)

pedido['CohortGroup'] = pedido.groupby(level=0)['FechaEvento'].min().apply(lambda x: x.strftime('%Y'))
pedido.reset_index(inplace=True)
pedido.head()

cohortes = pedido.sort_values(by=['ClienteEvento'])

#Rollup data by CohortGroup & OrderPeriod -> Since we're looking at yearly cohorts, we need to aggregate users, orders, and amount spent by the CohortGroup within the year (OrderPeriod).
grouped = cohortes.groupby(['CohortGroup', 'OrderPeriod'])

# count the unique users, orders, and total revenue per Group + Period
cohorts = grouped.agg({'ClienteEvento': pd.Series.nunique,
                       'CodigoEvento': pd.Series.nunique,
                       'CantidadArticuloEvento': np.sum})

# make the column names more meaningful
cohorts.rename(columns={'ClienteEvento': 'TotalUsers',
                        'CodigoEvento': 'TotalOrders'}, inplace=True)
cohorts.head()

# Label the CohortPeriod for each CohortGroup
def cohort_period(df):
    """
    Creates a `CohortPeriod` column, which is the Nth period based on the user's first purchase.
    
    Example
    -------
    Say you want to get the 3rd month for every user:
        df.sort(['UserId', 'OrderTime', inplace=True)
        df = df.groupby('UserId').apply(cohort_period)
        df[df.CohortPeriod == 3]
    """
    df['CohortPeriod'] = np.arange(len(df)) + 1
    return df

cohorts = cohorts.groupby(level=0).apply(cohort_period)
cohorts.head()

#User Retention by Cohort Group
# reindex the DataFrame
cohorts.reset_index(inplace=True)
cohorts.set_index(['CohortGroup', 'CohortPeriod'], inplace=True)

# create a Series holding the total size of each CohortGroup
cohort_group_size = cohorts['TotalUsers'].groupby(level=0).first()
cohort_group_size.head()

cohorts['TotalUsers'].head()

cohorts['TotalUsers'].unstack(0).head()

user_retention = cohorts['TotalUsers'].unstack(0).divide(cohort_group_size, axis=1)
user_retention.head(10)

user_retention[['2010','2011','2012','2013','2014','2015','2016', '2017', '2018', '2019']].plot(figsize=(10,5))
plt.title('Cohorts: User Retention')
plt.xticks(np.arange(1, 12.1, 1))
plt.xlim(1, 12)
plt.ylabel('% of Cohort Purchasing');

#la gráfica nos indica que cada año la pérdida de clientes es más precipitada. Se retienen más clientes que compran en 2016 que en 2019.

#Cohorts representation
import seaborn as sns
sns.set(style='white')

plt.figure(figsize=(12, 8))
plt.title('Cohorts: User Retention')
sns.heatmap(user_retention.T, mask=user_retention.T.isnull(), annot=True, fmt='.0%');